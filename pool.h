#pragma once// c/c++#include <algorithm>#include <chrono>#include <condition_variable>#include <functional>#include <list>#include <mutex>#include <queue>#include <string>#include <thread>#include <vector>class TaskPool{    // 任务函数及任务成功/失败回调函数签名    typedef std::function<bool(void *ptr)> TaskFunc;    // 任务信息    typedef struct TaskInfo_s {        int32_t ms;        // 执行周期        void *ptr;         // 自定义指针        std::string name;  // 任务名        TaskFunc func;     // 任务函数        TaskFunc success;  // 任务执行成功回调        TaskFunc fail;     // 任务执行失败回调    } TaskInfo;    // 默认回调函数#define DefaultCallback [](void *ptr) { return true; }private:    // 私有构建函数    TaskPool(int32_t maxThreads);    ~TaskPool();public:    // 获取单例    static TaskPool *GetInstance(int32_t interval = 16, int32_t maxThreads = 0);    // 定时任务线程分发函数    static void ThreadTimerLoop(void *ptr);    // 任务处理函数    static void ThreadTaskLoop(void *ptr);    void Start();    void Stop(bool join = true);    void SetInterval(int32_t value);    // 提交一次性任务    void SubmitOnceTask(std::string name, void *ptr, TaskFunc func, TaskFunc OnSuccess = DefaultCallback, TaskFunc OnFail = DefaultCallback);    void SubmitOnceTask(TaskInfo &info);    void SubmitOnceTaskWithoutLock(std::string name, void *ptr, TaskFunc func, TaskFunc OnSuccess = DefaultCallback, TaskFunc OnFail = DefaultCallback);    void SubmitOnceTaskWithoutLock(TaskInfo &info);    // 提交周期性任务    void SubmitIntervalTask(std::string name, void *ptr, int32_t ms, TaskFunc func, TaskFunc OnSuccess = DefaultCallback, TaskFunc OnFail = DefaultCallback);    // 更改定期任务时间    void UpdateIntervalTask(std::string name, int32_t ms);    // 移除周期性任务    void RemoveIntervalTask(std::string name, bool lock = true);private:    // 周期性任务清单    std::vector<std::pair<int32_t, TaskInfo>> m_IntevalTasks;    // 任务池    std::queue<TaskInfo> m_PendingTasks;    // 任务线程    std::thread *m_pThreadWorker;    // 运行标志    bool m_running;    // 时间片    int32_t m_interval;    // 最大线程数    int32_t m_maxThreads;    // 临时创建的线程    std::list<std::thread *> m_backgroundThreads;    // 锁    std::mutex m_mutexIntervalTasks;    std::mutex m_mutexPendingTasksWait;    std::timed_mutex m_mutexPendingTasksOpt;    // 条件变量    std::condition_variable m_cvPendingTasks;};